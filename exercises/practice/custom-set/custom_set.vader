
Execute (sets with no elements are empty):
  let g:set = Set([])
  Assert g:set.IsEmpty()

Execute (sets with elements are not empty):
  let g:set = Set([1])
  Assert !g:set.IsEmpty()

Execute (nothing is contained in an empty set):
  let g:set = Set([])
  let g:element = 1
  Assert !g:set.Contains(g:element)

Execute (when the element is in the set):
  let g:set = Set([1, 2, 3])
  let g:element = 1
  Assert g:set.Contains(g:element)

Execute (when the element is not in the set):
  let g:set = Set([1, 2, 3])
  let g:element = 4
  Assert !g:set.Contains(g:element)

Execute (empty set is subset of another empty set):
  let g:set1 = Set([])
  let g:set2 = Set([])
  Assert g:set1.IsSubset(g:set2)

Execute (empty set is subset of non-empty set):
  let g:set1 = Set([])
  let g:set2 = Set([1])
  Assert g:set1.IsSubset(g:set2)

Execute (non-empty set is not subset of empty set):
  let g:set1 = Set([1])
  let g:set2 = Set([])
  Assert !g:set1.IsSubset(g:set2)

Execute (set is subset of set with exact same elements):
  let g:set1 = Set([1, 2, 3])
  let g:set2 = Set([1, 2, 3])
  Assert g:set1.IsSubset(g:set2)

Execute (set is subset of larger set with same elements):
  let g:set1 = Set([1, 2, 3])
  let g:set2 = Set([4, 1, 2, 3])
  Assert g:set1.IsSubset(g:set2)

Execute (set is not subset of set that does not contain its elements):
  let g:set1 = Set([1, 2, 3])
  let g:set2 = Set([4, 1, 3])
  Assert !g:set1.IsSubset(g:set2)

Execute (the empty set is disjoint with itself):
  let g:set1 = Set([])
  let g:set2 = Set([])
  Assert g:set1.IsDisjoint(g:set2)

Execute (empty set is disjoint with non-empty set):
  let g:set1 = Set([])
  let g:set2 = Set([1])
  Assert g:set1.IsDisjoint(g:set2)

Execute (non-empty set is disjoint with empty set):
  let g:set1 = Set([1])
  let g:set2 = Set([])
  Assert g:set1.IsDisjoint(g:set2)

Execute (sets are not disjoint if they share an element):
  let g:set1 = Set([1, 2])
  let g:set2 = Set([2, 3])
  Assert !g:set1.IsDisjoint(g:set2)

Execute (sets are disjoint if they share no elements):
  let g:set1 = Set([1, 2])
  let g:set2 = Set([3, 4])
  Assert g:set1.IsDisjoint(g:set2)

Execute (empty sets are equal):
  let g:set1 = Set([])
  let g:set2 = Set([])
  AssertEqual g:set1.values, g:set2.values

Execute (empty set is not equal to non-empty set):
  let g:set1 = Set([])
  let g:set2 = Set([1, 2, 3])
  Assert g:set1.values !=  g:set2.values

Execute (non-empty set is not equal to empty set):
  let g:set1 = Set([1, 2, 3])
  let g:set2 = Set([])
  Assert g:set1.values !=  g:set2.values

Execute (sets with the same elements are equal):
  let g:set1 = Set([1, 2])
  let g:set2 = Set([2, 1])
  Assert g:set1.values ==  g:set2.values

Execute (sets with different elements are not equal):
  let g:set1 = Set([1, 2, 3])
  let g:set2 = Set([1, 2, 4])
  Assert g:set1.values !=  g:set2.values

Execute (set is not equal to larger set with same elements):
  let g:set1 = Set([1, 2, 3])
  let g:set2 = Set([1, 2, 3, 4])
  Assert g:set1.values !=  g:set2.values

Execute (set is equal to a set constructed from a list with duplicates):
  let g:set1 = Set([1])
  let g:set2 = Set([1, 1])
  AssertEqual g:set1, g:set2

Execute (add to empty set):
  let g:set = Set([])
  call g:set.Add(3)
  let g:expected = Set([3])
  AssertEqual g:expected, g:set

Execute (add to non-empty set):
  let g:set = Set([1, 2, 4])
  call g:set.Add(3)
  let g:expected = Set([1, 2, 3, 4])
  AssertEqual g:expected, g:set

Execute (adding an existing element does not change the set):
  let g:set = Set([1, 2, 3])
  call g:set.Add(3)
  let g:expected = Set([1, 2, 3])
  AssertEqual g:expected, g:set

Execute (intersection of two empty sets is an empty set):
  let g:set1 = Set([])
  let g:set2 = Set([])
  let g:expected = Set([])
  AssertEqual g:expected, g:set1.Intersection(g:set2)

Execute (intersection of an empty set and non-empty set is an empty set):
  let g:set1 = Set([])
  let g:set2 = Set([3, 2, 5])
  let g:expected = Set([])
  AssertEqual g:expected, g:set1.Intersection(g:set2)

Execute (intersection of a non-empty set and an empty set is an empty set):
  let g:set1 = Set([1, 2, 3, 4])
  let g:set2 = Set([])
  let g:expected = Set([])
  AssertEqual g:expected, g:set1.Intersection(g:set2)

Execute (intersection of two sets with no shared elements is an empty set):
  let g:set1 = Set([1, 2, 3])
  let g:set2 = Set([4, 5, 6])
  let g:expected = Set([])
  AssertEqual g:expected, g:set1.Intersection(g:set2)

Execute (intersection of two sets with shared elements is a set of the shared elements):
  let g:set1 = Set([1, 2, 3, 4])
  let g:set2 = Set([3, 2, 5])
  let g:expected = Set([2, 3])
  AssertEqual g:expected, g:set1.Intersection(g:set2)

Execute (difference of two empty sets is an empty set):
  let g:set1 = Set([])
  let g:set2 = Set([])
  let g:expected = Set([])
  AssertEqual g:expected, g:set1.Difference(g:set2)

Execute (difference of empty set and non-empty set is an empty set):
  let g:set1 = Set([])
  let g:set2 = Set([3, 2, 5])
  let g:expected = Set([])
  AssertEqual g:expected, g:set1.Difference(g:set2)

Execute (difference of a non-empty set and an empty set is the non-empty set):
  let g:set1 = Set([1, 2, 3, 4])
  let g:set2 = Set([])
  let g:expected = Set([1, 2, 3, 4])
  AssertEqual g:expected, g:set1.Difference(g:set2)

Execute (difference of two non-empty sets is a set of elements that are only in the first set):
  let g:set1 = Set([3, 2, 1])
  let g:set2 = Set([2, 4])
  let g:expected = Set([1, 3])
  AssertEqual g:expected, g:set1.Difference(g:set2)

Execute (difference removes all duplicates in the first set):
  let g:set1 = Set([1, 1])
  let g:set2 = Set([1])
  let g:expected = Set([])
  AssertEqual g:expected, g:set1.Difference(g:set2)

Execute (union of empty sets is an empty set):
  let g:set1 = Set([])
  let g:set2 = Set([])
  let g:expected = Set([])
  AssertEqual g:expected, g:set1.Union(g:set2)

Execute (union of an empty set and non-empty set is the non-empty set):
  let g:set1 = Set([])
  let g:set2 = Set([2])
  let g:expected = Set([2])
  AssertEqual g:expected, g:set1.Union(g:set2)

Execute (union of a non-empty set and empty set is the non-empty set):
  let g:set1 = Set([1, 3])
  let g:set2 = Set([])
  let g:expected = Set([1, 3])
  AssertEqual g:expected, g:set1.Union(g:set2)

Execute (union of non-empty sets contains all unique elements):
  let g:set1 = Set([1, 3])
  let g:set2 = Set([2, 3])
  let g:expected = Set([3, 2, 1])
  AssertEqual g:expected, g:set1.Union(g:set2)
