
Execute (reading empty buffer should fail):
  let g:buffer = CircularBuffer(1)
  AssertThrows call g:buffer.Read()
  AssertEqual "Empty buffer", g:vader_exception

Execute (can read an item just written):
  let g:buffer = CircularBuffer(1)
  call g:buffer.Write(1)
  AssertEqual g:buffer.Read(), 1

Execute (each item may only be read once):
  let g:buffer = CircularBuffer(1)
  call g:buffer.Write(1)
  AssertEqual g:buffer.Read(), 1
  AssertThrows call g:buffer.Read()
  AssertEqual "Empty buffer", g:vader_exception

Execute (items are read in the order they are written):
  let g:buffer = CircularBuffer(2)
  call g:buffer.Write(1)
  call g:buffer.Write(2)
  AssertEqual g:buffer.Read(), 1
  AssertEqual g:buffer.Read(), 2

Execute (full buffer can't be written to):
  let g:buffer = CircularBuffer(1)
  call g:buffer.Write(1)
  AssertThrows call g:buffer.Write(2)
  AssertEqual "Full buffer", g:vader_exception

Execute (a read frees up capacity for another write):
  let g:buffer = CircularBuffer(1)
  call g:buffer.Write(1)
  AssertEqual g:buffer.Read(), 1
  call g:buffer.Write(2)
  AssertEqual g:buffer.Read(), 2

Execute (read position is maintained even across multiple writes):
  let g:buffer = CircularBuffer(3)
  call g:buffer.Write(1)
  call g:buffer.Write(2)
  AssertEqual g:buffer.Read(), 1
  call g:buffer.Write(3)
  AssertEqual g:buffer.Read(), 2
  AssertEqual g:buffer.Read(), 3

Execute (items cleared out of buffer can't be read):
  let g:buffer = CircularBuffer(1)
  call g:buffer.Write(1)
  call g:buffer.Clear()
  AssertThrows call g:buffer.Read()
  AssertEqual "Empty buffer", g:vader_exception

Execute (clear frees up capacity for another write):
  let g:buffer = CircularBuffer(1)
  call g:buffer.Write(1)
  call g:buffer.Clear()
  call g:buffer.Write(2)
  AssertEqual g:buffer.Read(), 2

Execute (clear does nothing on empty buffer):
  let g:buffer = CircularBuffer(1)
  call g:buffer.Clear()
  call g:buffer.Write(1)
  AssertEqual g:buffer.Read(), 1

Execute (overwrite acts like write on non-full buffer):
  let g:buffer = CircularBuffer(2)
  call g:buffer.Write(1)
  call g:buffer.Overwrite(2)
  AssertEqual g:buffer.Read(), 1
  AssertEqual g:buffer.Read(), 2

Execute (overwrite replaces the oldest item on full buffer):
  let g:buffer = CircularBuffer(2)
  call g:buffer.Write(1)
  call g:buffer.Write(2)
  call g:buffer.Overwrite(3)
  AssertEqual g:buffer.Read(), 2
  AssertEqual g:buffer.Read(), 3

Execute (overwrite replaces the oldest item remaining in buffer following a read):
  let g:buffer = CircularBuffer(3)
  call g:buffer.Write(1)
  call g:buffer.Write(2)
  call g:buffer.Write(3)
  AssertEqual g:buffer.Read(), 1
  call g:buffer.Write(4)
  call g:buffer.Overwrite(5)
  AssertEqual g:buffer.Read(), 3
  AssertEqual g:buffer.Read(), 4
  AssertEqual g:buffer.Read(), 5

Execute (initial clear does not affect wrapping around):
  let g:buffer = CircularBuffer(2)
  call g:buffer.Clear()
  call g:buffer.Write(1)
  call g:buffer.Write(2)
  call g:buffer.Overwrite(3)
  call g:buffer.Overwrite(4)
  AssertEqual g:buffer.Read(), 3
  AssertEqual g:buffer.Read(), 4
  AssertThrows call g:buffer.Read()
  AssertEqual "Empty buffer", g:vader_exception
  