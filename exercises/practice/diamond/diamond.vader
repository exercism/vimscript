Execute (Degenerate case with a single 'A' row):
  let g:letter = 'A'
  let g:expected = 'A'
  AssertEqual g:expected, Rows(g:letter)

Execute (Degenerate case with no row containing 3 distinct groups of spaces):
  let g:letter = 'B'
  let g:expected = join([
  \ ' A ',
  \ 'B B',
  \ ' A '], '\n')
  AssertEqual g:expected, Rows(g:letter)

Execute (Smallest non-degenerate case with odd diamond side length):
  let g:letter = 'C'
  let g:expected = join([
  \ '  A  ',
  \ ' B B ',
  \ 'C   C',
  \ ' B B ',
  \ '  A  '], '\n')
  AssertEqual g:expected, Rows(g:letter)

Execute (Smallest non-degenerate case with even diamond side length):
  let g:letter = 'D'
  let g:expected = join([
  \ '   A   ',
  \ '  B B  ',
  \ ' C   C ',
  \ 'D     D',
  \ ' C   C ',
  \ '  B B  ',
  \ '   A   '], '\n')
  AssertEqual g:expected, Rows(g:letter)

Execute (Largest possible diamond):
  let g:letter = 'Z'
  let g:expected = join([
  \ '                         A                         ',
  \ '                        B B                        ',
  \ '                       C   C                       ',
  \ '                      D     D                      ',
  \ '                     E       E                     ',
  \ '                    F         F                    ',
  \ '                   G           G                   ',
  \ '                  H             H                  ',
  \ '                 I               I                 ',
  \ '                J                 J                ',
  \ '               K                   K               ',
  \ '              L                     L              ',
  \ '             M                       M             ',
  \ '            N                         N            ',
  \ '           O                           O           ',
  \ '          P                             P          ',
  \ '         Q                               Q         ',
  \ '        R                                 R        ',
  \ '       S                                   S       ',
  \ '      T                                     T      ',
  \ '     U                                       U     ',
  \ '    V                                         V    ',
  \ '   W                                           W   ',
  \ '  X                                             X  ',
  \ ' Y                                               Y ',
  \ 'Z                                                 Z',
  \ ' Y                                               Y ',
  \ '  X                                             X  ',
  \ '   W                                           W   ',
  \ '    V                                         V    ',
  \ '     U                                       U     ',
  \ '      T                                     T      ',
  \ '       S                                   S       ',
  \ '        R                                 R        ',
  \ '         Q                               Q         ',
  \ '          P                             P          ',
  \ '           O                           O           ',
  \ '            N                         N            ',
  \ '             M                       M             ',
  \ '              L                     L              ',
  \ '               K                   K               ',
  \ '                J                 J                ',
  \ '                 I               I                 ',
  \ '                  H             H                  ',
  \ '                   G           G                   ',
  \ '                    F         F                    ',
  \ '                     E       E                     ',
  \ '                      D     D                      ',
  \ '                       C   C                       ',
  \ '                        B B                        ',
  \ '                         A                         '], '\n')
  AssertEqual g:expected, Rows(g:letter)
