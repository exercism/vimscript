Execute (just the header if no input):
  let g:expected = 'Team                           | MP |  W |  D |  L |  P'
  AssertEqual g:expected, Tally('inputs/01.txt')

Execute (a win is three points, a loss is zero points):
  let g:expected = join([
  \ 'Team                           | MP |  W |  D |  L |  P',
  \ 'Allegoric Alaskans             |  1 |  1 |  0 |  0 |  3',
  \ 'Blithering Badgers             |  1 |  0 |  0 |  1 |  0'], "\n")
  AssertEqual g:expected, Tally('inputs/02.txt')

Execute (a win can also be expressed as a loss):
  let g:expected = join([
  \ 'Team                           | MP |  W |  D |  L |  P',
  \ 'Allegoric Alaskans             |  1 |  1 |  0 |  0 |  3',
  \ 'Blithering Badgers             |  1 |  0 |  0 |  1 |  0'], "\n")
  AssertEqual g:expected, Tally('inputs/03.txt')

Execute (a different team can win):
  let g:expected = join([
  \ 'Team                           | MP |  W |  D |  L |  P',
  \ 'Blithering Badgers             |  1 |  1 |  0 |  0 |  3',
  \ 'Allegoric Alaskans             |  1 |  0 |  0 |  1 |  0'], "\n")
  AssertEqual g:expected, Tally('inputs/04.txt')

Execute (a draw is one point each):
  let g:expected = join([
  \ 'Team                           | MP |  W |  D |  L |  P',
  \ 'Allegoric Alaskans             |  1 |  0 |  1 |  0 |  1',
  \ 'Blithering Badgers             |  1 |  0 |  1 |  0 |  1'], "\n")
  AssertEqual g:expected, Tally('inputs/05.txt')

Execute (There can be more than one match):
  let g:expected = join([
  \ 'Team                           | MP |  W |  D |  L |  P',
  \ 'Allegoric Alaskans             |  2 |  2 |  0 |  0 |  6',
  \ 'Blithering Badgers             |  2 |  0 |  0 |  2 |  0'], "\n")
  AssertEqual g:expected, Tally('inputs/06.txt')

Execute (There can be more than one winner):
  let g:expected = join([
  \ 'Team                           | MP |  W |  D |  L |  P',
  \ 'Allegoric Alaskans             |  2 |  1 |  0 |  1 |  3',
  \ 'Blithering Badgers             |  2 |  1 |  0 |  1 |  3'], "\n")
  AssertEqual g:expected, Tally('inputs/07.txt')
  

Execute (There can be more than two teams):
  let g:expected = join([
  \ 'Team                           | MP |  W |  D |  L |  P',
  \ 'Allegoric Alaskans             |  2 |  2 |  0 |  0 |  6',
  \ 'Blithering Badgers             |  2 |  1 |  0 |  1 |  3',
  \ 'Courageous Californians        |  2 |  0 |  0 |  2 |  0'], "\n")
  AssertEqual g:expected, Tally('inputs/08.txt')
  
Execute (typical input):
  let g:expected = join([
  \ 'Team                           | MP |  W |  D |  L |  P',
  \ 'Devastating Donkeys            |  3 |  2 |  1 |  0 |  7',
  \ 'Allegoric Alaskans             |  3 |  2 |  0 |  1 |  6',
  \ 'Blithering Badgers             |  3 |  1 |  0 |  2 |  3',
  \ 'Courageous Californians        |  3 |  0 |  1 |  2 |  1'], "\n")
  AssertEqual g:expected, Tally('inputs/09.txt')

Execute (incomplete competition (not all pairs have played)):
  let g:expected = join([
  \ 'Team                           | MP |  W |  D |  L |  P',
  \ 'Allegoric Alaskans             |  3 |  2 |  0 |  1 |  6',
  \ 'Blithering Badgers             |  2 |  1 |  1 |  0 |  4',
  \ 'Courageous Californians        |  2 |  0 |  1 |  1 |  1',
  \ 'Devastating Donkeys            |  1 |  0 |  0 |  1 |  0'], "\n")
  AssertEqual g:expected, Tally('inputs/10.txt')
  
Execute (ties broken alphabetically):
  let g:expected = join([
  \ 'Team                           | MP |  W |  D |  L |  P',
  \ 'Allegoric Alaskans             |  3 |  2 |  1 |  0 |  7',
  \ 'Courageous Californians        |  3 |  2 |  1 |  0 |  7',
  \ 'Blithering Badgers             |  3 |  0 |  1 |  2 |  1',
  \ 'Devastating Donkeys            |  3 |  0 |  1 |  2 |  1'], "\n")
  AssertEqual g:expected, Tally('inputs/11.txt')

Execute (ensure points sorted numerically):
  let g:expected = join([
  \ 'Team                           | MP |  W |  D |  L |  P',
  \ 'Devastating Donkeys            |  5 |  4 |  0 |  1 | 12',
  \ 'Blithering Badgers             |  5 |  1 |  0 |  4 |  3'], "\n")
  AssertEqual g:expected, Tally('inputs/12.txt')
