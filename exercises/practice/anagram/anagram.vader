
Execute (no matches):
  let g:candidates = ['hello', 'world', 'zombies', 'pants']
  let g:subject = "diaper"
  let g:expected = []
  AssertEqual g:expected, FindAnagrams(g:candidates, g:subject)

Execute (detects two anagrams):
  let g:candidates = ['stream', 'pigeon', 'maters']
  let g:subject = "master"
  let g:expected = ['stream', 'maters']
  AssertEqual g:expected, FindAnagrams(g:candidates, g:subject)

Execute (detects two anagrams):
  let g:candidates = ['lemons', 'cherry', 'melons']
  let g:subject = "solemn"
  let g:expected = ['lemons', 'melons']
  AssertEqual g:expected, FindAnagrams(g:candidates, g:subject)

Execute (does not detect anagram subsets):
  let g:candidates = ['dog', 'goody']
  let g:subject = "good"
  let g:expected = []
  AssertEqual g:expected, FindAnagrams(g:candidates, g:subject)

Execute (detects anagram):
  let g:candidates = ['enlists', 'google', 'inlets', 'banana']
  let g:subject = "listen"
  let g:expected = ['inlets']
  AssertEqual g:expected, FindAnagrams(g:candidates, g:subject)

Execute (detects three anagrams):
  let g:candidates = ['gallery', 'ballerina', 'regally', 'clergy', 'largely', 'leading']
  let g:subject = "allergy"
  let g:expected = ['gallery', 'regally', 'largely']
  AssertEqual g:expected, FindAnagrams(g:candidates, g:subject)

Execute (detects multiple anagrams with different case):
  let g:candidates = ['Eons', 'ONES']
  let g:subject = "nose"
  let g:expected = ['Eons', 'ONES']
  AssertEqual g:expected, FindAnagrams(g:candidates, g:subject)

Execute (does not detect non-anagrams with identical checksum):
  let g:candidates = ['last']
  let g:subject = "mass"
  let g:expected = []
  AssertEqual g:expected, FindAnagrams(g:candidates, g:subject)

Execute (detects anagrams case-insensitively):
  let g:candidates = ['cashregister', 'Carthorse', 'radishes']
  let g:subject = "Orchestra"
  let g:expected = ['Carthorse']
  AssertEqual g:expected, FindAnagrams(g:candidates, g:subject)

Execute (detects anagrams using case-insensitive subject):
  let g:candidates = ['cashregister', 'carthorse', 'radishes']
  let g:subject = "Orchestra"
  let g:expected = ['carthorse']
  AssertEqual g:expected, FindAnagrams(g:candidates, g:subject)

Execute (detects anagrams using case-insensitive possible matches):
  let g:candidates = ['cashregister', 'Carthorse', 'radishes']
  let g:subject = "orchestra"
  let g:expected = ['Carthorse']
  AssertEqual g:expected, FindAnagrams(g:candidates, g:subject)

Execute (anagrams must use all letters exactly once):
  let g:candidates = ['patter']
  let g:subject = "tapper"
  let g:expected = []
  AssertEqual g:expected, FindAnagrams(g:candidates, g:subject)

Execute (words are not anagrams of themselves):
  let g:candidates = ['BANANA']
  let g:subject = "BANANA"
  let g:expected = []
  AssertEqual g:expected, FindAnagrams(g:candidates, g:subject)

Execute (words are not anagrams of themselves even if letter case is partially different):
  let g:candidates = ['Banana']
  let g:subject = "BANANA"
  let g:expected = []
  AssertEqual g:expected, FindAnagrams(g:candidates, g:subject)

Execute (words are not anagrams of themselves even if letter case is completely different):
  let g:candidates = ['banana']
  let g:subject = "BANANA"
  let g:expected = []
  AssertEqual g:expected, FindAnagrams(g:candidates, g:subject)

Execute (words other than themselves can be anagrams):
  let g:candidates = ['LISTEN', 'Silent']
  let g:subject = "LISTEN"
  let g:expected = ['Silent']
  AssertEqual g:expected, FindAnagrams(g:candidates, g:subject)

Execute (handles case of greek letters):
  let g:candidates = ['ΒΓΑ', 'ΒΓΔ', 'γβα', 'αβγ']
  let g:subject = "ΑΒΓ"
  let g:expected = ['ΒΓΑ', 'γβα']
  AssertEqual g:expected, FindAnagrams(g:candidates, g:subject)

Execute (different characters may have the same bytes):
  let g:candidates = ['€a']
  let g:subject = "a⬂"
  let g:expected = []
  AssertEqual g:expected, FindAnagrams(g:candidates, g:subject)
