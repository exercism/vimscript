Execute (Direct parent-child relation):
  let g:familyTree = {
  \ 'Vera': ['Tomoko'],
  \ 'Tomoko': ['Aditi']}
  AssertEqual 1, DegreeOfSeparation(g:familyTree, 'Vera', 'Tomoko')

Execute (Sibling relationship):
  let g:familyTree = {'Dalia': ['Olga', 'Yassin']}
  AssertEqual 1, DegreeOfSeparation(g:familyTree, 'Olga', 'Yassin')

Execute (Two degrees of separation, grandchild):
  let g:familyTree = {
  \ 'Khadija': ['Mateo'],
  \ 'Mateo': ['Rami']}
  AssertEqual 2, DegreeOfSeparation(g:familyTree, 'Khadija', 'Rami')

Execute (Unrelated individuals):
  let g:familyTree = {
  \ 'Priya': ['Rami'],
  \ 'Kaito': ['Elif']}
  AssertEqual -1, DegreeOfSeparation(g:familyTree, 'Priya', 'Kaito')

Execute (Complex graph, cousins):
  let g:familyTree = {
  \ 'Aiko': ['Bao', 'Carlos'],
  \ 'Bao': ['Dalia', 'Elias'],
  \ 'Carlos': ['Fatima', 'Gustavo'],
  \ 'Dalia': ['Hassan', 'Isla'],
  \ 'Elias': ['Javier'],
  \ 'Fatima': ['Khadija', 'Liam'],
  \ 'Gustavo': ['Mina'],
  \ 'Hassan': ['Noah', 'Olga'],
  \ 'Isla': ['Pedro'],
  \ 'Javier': ['Quynh', 'Ravi'],
  \ 'Khadija': ['Sofia'],
  \ 'Liam': ['Tariq', 'Uma'],
  \ 'Mina': ['Viktor', 'Wang'],
  \ 'Noah': ['Xiomara'],
  \ 'Olga': ['Yuki'],
  \ 'Pedro': ['Zane', 'Aditi'],
  \ 'Quynh': ['Boris'],
  \ 'Ravi': ['Celine'],
  \ 'Sofia': ['Diego', 'Elif'],
  \ 'Tariq': ['Farah'],
  \ 'Uma': ['Giorgio'],
  \ 'Viktor': ['Hana', 'Ian'],
  \ 'Wang': ['Jing'],
  \ 'Xiomara': ['Kaito'],
  \ 'Yuki': ['Leila'],
  \ 'Zane': ['Mateo'],
  \ 'Aditi': ['Nia'],
  \ 'Boris': ['Oscar'],
  \ 'Celine': ['Priya'],
  \ 'Diego': ['Qi'],
  \ 'Elif': ['Rami'],
  \ 'Farah': ['Sven'],
  \ 'Giorgio': ['Tomoko'],
  \ 'Hana': ['Umar'],
  \ 'Ian': ['Vera'],
  \ 'Jing': ['Wyatt'],
  \ 'Kaito': ['Xia'],
  \ 'Leila': ['Yassin'],
  \ 'Mateo': ['Zara'],
  \ 'Nia': ['Antonio'],
  \ 'Oscar': ['Bianca'],
  \ 'Priya': ['Cai'],
  \ 'Qi': ['Dimitri'],
  \ 'Rami': ['Ewa'],
  \ 'Sven': ['Fabio'],
  \ 'Tomoko': ['Gabriela'],
  \ 'Umar': ['Helena'],
  \ 'Vera': ['Igor'],
  \ 'Wyatt': ['Jun'],
  \ 'Xia': ['Kim'],
  \ 'Yassin': ['Lucia'],
  \ 'Zara': ['Mohammed']}
  AssertEqual 9, DegreeOfSeparation(g:familyTree, 'Dimitri', 'Fabio')

Execute (Complex graph, no shortcut, far removed nephew):
  let g:familyTree = {
  \ 'Mina': ['Viktor', 'Wang'],
  \ 'Olga': ['Yuki'],
  \ 'Javier': ['Quynh', 'Ravi'],
  \ 'Tariq': ['Farah'],
  \ 'Viktor': ['Hana', 'Ian'],
  \ 'Diego': ['Qi'],
  \ 'Carlos': ['Fatima', 'Gustavo'],
  \ 'Hana': ['Umar'],
  \ 'Jing': ['Wyatt'],
  \ 'Sven': ['Fabio'],
  \ 'Zane': ['Mateo'],
  \ 'Isla': ['Pedro'],
  \ 'Quynh': ['Boris'],
  \ 'Kaito': ['Xia'],
  \ 'Liam': ['Tariq', 'Uma'],
  \ 'Priya': ['Cai'],
  \ 'Qi': ['Dimitri'],
  \ 'Wang': ['Jing'],
  \ 'Yuki': ['Leila'],
  \ 'Xia': ['Kim'],
  \ 'Pedro': ['Zane', 'Aditi'],
  \ 'Uma': ['Giorgio'],
  \ 'Giorgio': ['Tomoko'],
  \ 'Gustavo': ['Mina'],
  \ 'Sofia': ['Diego', 'Elif'],
  \ 'Leila': ['Yassin'],
  \ 'Umar': ['Helena'],
  \ 'Aiko': ['Bao', 'Carlos'],
  \ 'Fatima': ['Khadija', 'Liam'],
  \ 'Oscar': ['Bianca'],
  \ 'Wyatt': ['Jun'],
  \ 'Ian': ['Vera'],
  \ 'Mateo': ['Zara'],
  \ 'Noah': ['Xiomara'],
  \ 'Celine': ['Priya'],
  \ 'Xiomara': ['Kaito'],
  \ 'Bao': ['Dalia', 'Elias'],
  \ 'Elif': ['Rami'],
  \ 'Farah': ['Sven'],
  \ 'Aditi': ['Nia'],
  \ 'Vera': ['Igor'],
  \ 'Boris': ['Oscar'],
  \ 'Khadija': ['Sofia'],
  \ 'Zara': ['Mohammed'],
  \ 'Dalia': ['Hassan', 'Isla'],
  \ 'Ravi': ['Celine'],
  \ 'Yassin': ['Lucia'],
  \ 'Elias': ['Javier'],
  \ 'Nia': ['Antonio'],
  \ 'Rami': ['Ewa'],
  \ 'Hassan': ['Noah', 'Olga'],
  \ 'Tomoko': ['Gabriela']}
  AssertEqual 14, DegreeOfSeparation(g:familyTree, 'Lucia', 'Jun')

Execute (Complex graph, some shortcuts, cross-down and cross-up, cousins several times removed, with unrelated family tree):
  let g:familyTree = {
  \ 'Mina': ['Viktor', 'Wang'],
  \ 'Olga': ['Yuki'],
  \ 'Javier': ['Quynh', 'Ravi'],
  \ 'Tariq': ['Farah'],
  \ 'Viktor': ['Hana', 'Ian'],
  \ 'Diego': ['Qi'],
  \ 'Carlos': ['Fatima', 'Gustavo'],
  \ 'Hana': ['Umar'],
  \ 'Jing': ['Wyatt'],
  \ 'Sven': ['Fabio'],
  \ 'Zane': ['Mateo'],
  \ 'Isla': ['Pedro'],
  \ 'Quynh': ['Boris'],
  \ 'Kaito': ['Xia'],
  \ 'Liam': ['Tariq', 'Uma'],
  \ 'Priya': ['Cai'],
  \ 'Qi': ['Dimitri'],
  \ 'Wang': ['Jing'],
  \ 'Yuki': ['Leila'],
  \ 'Xia': ['Kim'],
  \ 'Pedro': ['Zane', 'Aditi'],
  \ 'Uma': ['Giorgio'],
  \ 'Giorgio': ['Tomoko'],
  \ 'Gustavo': ['Mina'],
  \ 'Sofia': ['Diego', 'Elif'],
  \ 'Leila': ['Yassin'],
  \ 'Umar': ['Helena'],
  \ 'Aiko': ['Bao', 'Carlos'],
  \ 'Fatima': ['Khadija', 'Liam'],
  \ 'Oscar': ['Bianca'],
  \ 'Wyatt': ['Jun'],
  \ 'Ian': ['Vera'],
  \ 'Mateo': ['Zara'],
  \ 'Noah': ['Xiomara'],
  \ 'Celine': ['Priya'],
  \ 'Xiomara': ['Kaito'],
  \ 'Bao': ['Dalia'],
  \ 'Elif': ['Rami'],
  \ 'Farah': ['Sven'],
  \ 'Aditi': ['Nia'],
  \ 'Vera': ['Igor'],
  \ 'Boris': ['Oscar'],
  \ 'Khadija': ['Sofia'],
  \ 'Zara': ['Mohammed'],
  \ 'Dalia': ['Hassan', 'Isla'],
  \ 'Ravi': ['Celine'],
  \ 'Yassin': ['Lucia'],
  \ 'Nia': ['Antonio'],
  \ 'Rami': ['Ewa'],
  \ 'Hassan': ['Noah', 'Olga'],
  \ 'Tomoko': ['Gabriela']}
  AssertEqual 12, DegreeOfSeparation(g:familyTree, 'Wyatt', 'Xia')
