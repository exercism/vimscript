
Execute (empty):
  let g:array = []
  let g:expected = []
  AssertEqual g:expected, Flatten(g:array)

Execute (no nesting):
  let g:array = [0, 1, 2]
  let g:expected = [0, 1, 2]
  AssertEqual g:expected, Flatten(g:array)

Execute (flattens a nested array):
  let g:array = [[[]]]
  let g:expected = []
  AssertEqual g:expected, Flatten(g:array)

Execute (flattens array with just integers present):
  let g:array = [1, [2, 3, 4, 5, 6, 7], 8]
  let g:expected = [1, 2, 3, 4, 5, 6, 7, 8]
  AssertEqual g:expected, Flatten(g:array)

Execute (5 level nesting):
  let g:array = [0, 2, [[2, 3], 8, 100, 4, [[[50]]]], -2]
  let g:expected = [0, 2, 2, 3, 8, 100, 4, 50, -2]
  AssertEqual g:expected, Flatten(g:array)

Execute (6 level nesting):
  let g:array = [1, [2, [[3]], [4, [[5]]], 6, 7], 8]
  let g:expected = [1, 2, 3, 4, 5, 6, 7, 8]
  AssertEqual g:expected, Flatten(g:array)

Execute (null values are omitted from the final result):
  let g:array = [1, 2, v:null]
  let g:expected = [1, 2]
  AssertEqual g:expected, Flatten(g:array)

Execute (consecutive null values at the front of the array are omitted from the final result):
  let g:array = [v:null, v:null, 3]
  let g:expected = [3]
  AssertEqual g:expected, Flatten(g:array)

Execute (consecutive null values in the middle of the array are omitted from the final result):
  let g:array = [1, v:null, v:null, 4]
  let g:expected = [1, 4]
  AssertEqual g:expected, Flatten(g:array)

Execute (6 level nested array with null values):
  let g:array = [0, 2, [[2, 3], 8, [[100]], v:null, [[v:null]]], -2]
  let g:expected = [0, 2, 2, 3, 8, 100, -2]
  AssertEqual g:expected, Flatten(g:array)

Execute (all values in nested array are null):
  let g:array = [v:null, [[[v:null]]], v:null, v:null, [[v:null, v:null], v:null], v:null]
  let g:expected = []
  AssertEqual g:expected, Flatten(g:array)
